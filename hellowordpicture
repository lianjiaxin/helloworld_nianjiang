#!/usr/bin/env python
# -*- coding: utf-8 -*-
#------------------------------------------------------------------------------
# Purpose:
'''
图像测试库主要用于图片属性分析和图片处理对比。目前已实现亮度，色度，饱和度，锐度，灰度，对比度的测评，另外支持
    色偏检测、图像过曝/过暗检测、噪点检测、镜像分析、走廊模式分析、图片相似性分析、图片模糊虚焦识别、黑白或彩色图片识别。
'''
# Author:      lianjiaxin
# History:
#
# Created:     2017-02-13
# Copyright:   (c) Hikvision.com 2017
#------------------------------------------------------------------------------
import os
import sys
import time
import math
import numpy as np
import cv2
from matplotlib import pyplot as plt
from PIL import Image
import ssim
import imagehash
reload(sys)
sys.setdefaultencoding('utf-8')


class Imagetestlib(object):
    '''
    图像测试库主要用于图片属性分析和图片处理对比。目前已实现亮度，色度，饱和度，锐度，灰度，对比度的测评，另外支持
        色偏检测、图像过曝/过暗检测、噪点检测、镜像分析、走廊模式分析、图片相似性分析、图片模糊虚焦识别、黑白或彩色图片识别。
    '''
    ROBOT_LIBRARY_SCOPE = 'TEST SUITE'
    version = '1.0.0'

    def __init__(self):
        self.file_extension = ['.jpg', '.jpeg', '.bmp', '.png']

    def _check_file(self, filepath):
        '''
        判断文件是否存在，及文件类型
        '''
        if not os.path.exists(filepath):
            raise Exception('OSError: [Errno 2] No such file or directory: %s' % filepath)
        filename, file_extension = os.path.splitext(filepath)
        if not file_extension.lower() in self.file_extension:
            raise Exception(
                "file extension is not available. The available file extensions include: %s" % str(self.file_extension))

    def get_available_file_extension(self):
        '''
        返回有效的图像扩展名列表
        '''

        return self.file_extension

    def assess_image_luminance(self, filepath):
        '''
        评估图片亮度
        参数:
            filepath:图片路径
        返回值:
            返回图像亮度评估数值，数值越大，亮度越高；范围：[0, 100]
        作者：
            lianjiaxin
        '''
        self._check_file(filepath)
        hsv = cv2.imread(filepath, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)
        luminance = float(v.sum()) / (hsv.shape[0] * hsv.shape[1])
        return round(luminance, 2)

    def assess_image_saturation(self, filepath):
        '''
        评估图片饱和度
        参数:
            filepath:图片路径
        返回值:
            返回图像饱和度评估数值，数值越大，饱和度越高；范围：[0, 255]
        作者：
            lianjiaxin
        '''
        self._check_file(filepath)
        hsv = cv2.imread(filepath, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)
        saturation = float(s.sum()) / (hsv.shape[0] * hsv.shape[1])
        return round(saturation, 2)

    # def assess_image_hue(self, filepath):
    #     '''
    #     评估图片色度
    #     参数:
    #         filepath:图片路径
    #     返回值:
    #         返回图像色度评估数值，数值越大，色度越高；范围：[0, 255]
    #     作者：
    #         lianjiaxin
    #     '''
    #     self._check_file(filepath)
    #     hsv = cv2.imread(filepath, cv2.COLOR_BGR2HSV)
    #     h, s, v = cv2.split(hsv)
    #     hue = float(h.sum()) / (hsv.shape[0] * hsv.shape[1])
    #     return round(hue, 2)

    def assess_image_gray(self, filepath):
        '''
        评估图片灰度
        参数:
            filepath:图片路径
        返回值:
            返回图像灰度评估数值，数值越大，灰度越高；范围：[0, 255]
        作者：
            lianjiaxin
        '''
        self._check_file(filepath)
        img = cv2.imread(filepath)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        print gray.shape
        gray_value = float(gray.sum()) / (gray.shape[0] * gray.shape[1])
        return round(gray_value, 2)

    def assess_image_contrast(self, filepath):
        '''
        评估图片对比度
        参数:
            filepath:图片路径
        返回值:
            返回图像对比度评估数值，数值越大，对比度越高；
        作者：
            lianjiaxin
        '''
        # 【算法】
        # I=im2double(imread('E1.jpg'));   %首先把图像数据类型转换为双精度浮点类型
        # I=rgb2gray(I);%将图像转换成二维
        # [Nx,Ny] = size(I);
        # Ng=256;
        # G=double(I);
        # %计算对比度
        # [counts,graylevels]=imhist(I);
        # PI=counts/(Nx*Ny);
        # averagevalue=sum(graylevels.*PI);
        # u4=sum((graylevels-repmat(averagevalue,[256,1])).^4.*PI);
        # standarddeviation=sum((graylevels-repmat(averagevalue,[256,1])).^2.*PI);
        # alpha4=u4/standarddeviation^2;
        # Fcontrast=sqrt(standarddeviation)/alpha4.^(1/4);
        # disp('对比度：');display(Fcontrast)

        self._check_file(filepath)
        im = cv2.imread(filepath)
        bins = np.arange(257)
        gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
        hist, bins = np.histogram(gray, bins)
        bins = np.arange(256)
        pi = hist * 1.0 / (im.shape[0] * im.shape[1])
        aver_b = sum(bins * pi)
        u4_array = np.power(bins * 1.0 - np.matlib.repmat(aver_b, 1, 256), 4) * pi
        u4 = u4_array.sum()
        std_array = np.power(bins * 1.0 - np.matlib.repmat(aver_b, 1, 256), 2) * pi
        std = std_array.sum()
        alpha4 = u4 / (std * std)
        contrast = np.sqrt(std) / math.sqrt(math.sqrt(alpha4))
        return int(contrast)

    def assess_image_sharpness(self, filepath):
        '''
        评估图片锐度
        参数:
            filepath:图片路径
        返回值：
            返回锐度评估值，数值越大，锐度越高
        作者：
            lianjiaxin
        '''
        self._check_file(filepath)
        img = cv2.imread(filepath)
        edges = cv2.Laplacian(img, cv2.CV_64F)
        std = round(edges.std(), 2)

        # text = 'var = %.2f' % cv2.Laplacian(img, cv2.CV_64F).var()
        # cv2.putText(img, text, (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1,(0, 255, 0), 2)
        # cv2.imshow('var', img)
        # cv2.waitKey(0)
        # cv2.destroyAllWindows()
        # cv2.imwrite('test.png',img)


        return std
        # assess_image_sharpness(self, filepath, minVal=50, maxVal=150, aperture_size=3):
        # edges = cv2.Canny(img, int(minVal), int(maxVal), int(aperture_size))
        # edges_count = edges.sum() / 255  # canny算法处理后，黑色为0,边缘点即白色为255
        # return edges_count
        # edge_percent = float(edges_count) / edges.size * 100
        # return round(edge_percent, 2)

    def is_image_colorful(self, filepath, rgb_range=15):
        '''
        判断图片是否为彩色
        参数:
            filepath:图片路径
            rgb_range:像素R,G,B通道之间的绝对值误差范围，rgb_range越小，黑白图片识别率越低；rgb_range越大，彩色图片识别率越低
        返回值:
            若图片为彩色，则返回True；否则返回False
        作者：
            lianjiaxin
        '''
        # 原理：彩色像素RGB三个通道的强度值差异很大
        if not str(rgb_range).isdigit():
            raise Exception("rgb_range value should be an integer")
        self._check_file(filepath)
        img = cv2.imread(filepath)
        if img.std() == 0:  # 全白或者全黑图像
            avg_l = img.sum() / img.size
            print avg_l
            if avg_l < 128:  # 黑色
                return False
            else:
                return True
        b, g, r = cv2.split(img)
        detal_rg = r - g
        detal_rb = r - b
        detal_gb = g - b
        # 选择绝对值最大的数
        max_rg = detal_rg.max() if detal_rg.max() > abs(detal_rg.min()) else abs(detal_rg.min())
        max_rb = detal_rb.max() if detal_rb.max() > abs(detal_rb.min()) else abs(detal_rb.min())
        max_gb = detal_gb.max() if detal_gb.max() > abs(detal_gb.min()) else abs(detal_gb.min())

        if max_rg > int(rgb_range) and max_rb > int(rgb_range) and max_gb > int(rgb_range):
            return True
        else:
            return False

    def detect_image_blur(self, filepath, threshold=100):
        '''
        检查图像是否模糊（虚焦）
        PS：【景深过深的场景判定为会判断为模糊吗？待确认；若判断有误，那么将图像拆分成M*N块进行分析，是否可以解决？待验证】
        参数：
            filepath:图片路径
            threshold:图像模糊、虚焦判断的阈值，默认值100。分析结果高于threshold则认定图像清晰，否则认定图像模糊、虚焦.
        返回值：
            图像清晰返回True，否则返回False
        作者：
            lianjiaxin
        '''
        self._check_file(filepath)
        img = cv2.imread(filepath)
        variance = cv2.Laplacian(img, cv2.CV_64F).var()
        # print variance
        return True if variance >= float(threshold) else False

    # **********************图像哈希算法计算两张图片的相似性****************************

    def calculate_similar_images_by_imghash(self, srcfile, dstfile):
        '''
        通过图像哈希算法计算两张图片的相似性【图片相似性计算推荐使用该方法】
        参数：
            srcfile:对比图片1路径
            dstfile:对比图片2路径
        返回值：
            两张图片哈希字符串不相同的数据位个数。如果不相同的数据位不超过5，说明图像很相似；
            如果介于5~10，说明两张图像比较相似；通常认为距离>10 就是两张完全不同的图片
        作者：
            lianjiaxin
        '''
        self._check_file(srcfile)
        self._check_file(dstfile)
        im1 = Image.open(srcfile)
        im2 = Image.open(dstfile)
        hash1 = imagehash.phash(im1)
        hash2 = imagehash.phash(im2)
        print 'srcfile imghash value: ', hash1
        print 'dstfile imghash value: ', hash2
        return hash1 - hash2

    # **********************灰度图像直方图算法计算两张图片的相似性****************************

    def _make_regalur_image(self, img, size=(256, 256)):
        '''
        把图片都统一到特别的规格(分辨率)
        参数：
            img:图像数组
            size:重新设置图像的规格大小
        '''
        return img.resize(size).convert('RGB')

    def _hist_similar(self, lh, rh):
        '''
        计算直方图相似性
        参数：
            lh, rh为直方图数据
        返回值：
            直方图相似度
        '''
        return sum(1 - (0 if l == r else float(abs(l - r))/max(l, r)) for l, r in zip(lh, rh))/len(lh)

    def _calc_similar(self, li, ri):
        '''
        计算图片相似性
        参数：
            li:图片1的数组
            ri:图片2的数组
        返回值：
            两张图片的相似度
        '''
        part_size = (64, 64)
        img_divide_num = (li.size[0] * li.size[1]) / (part_size[0] * part_size[1])  # 计算图像划分个数
        return sum(
            self._hist_similar(
                l.histogram(), r.histogram()) for l, r in zip(
                    self._split_image(li, part_size), self._split_image(ri, part_size))) / img_divide_num  # 16.0

    def _split_image(self, img, part_size=(64, 64)):
        '''
        分割图片
        参数：
            img:图像数组
            part_size:每个子图片的规格大小
        返回值：
            分割后的图片列表
        '''
        w, h = img.size
        pw, ph = part_size
        tem_img_list = []

        for i in xrange(0, w, pw):
            for j in xrange(0, h, ph):
                temp_img = img.crop((i, j, i+pw, j+ph)).copy()
                tem_img_list.append(temp_img)
        return tem_img_list

    def calculate_similar_images_by_histogram(self, srcfile, dstfile):
        '''
        通过灰度图像直方图算法计算两张图片的相似性
        参数：
            srcfile:对比图片1路径
            dstfile:对比图片2路径
        返回值：
            返回两张图片相似度（百分比）
        作者：
            lianjiaxin
        '''
        self._check_file(srcfile)
        self._check_file(dstfile)
        im1 = Image.open(srcfile)
        im2 = Image.open(dstfile)
        resize_value = im1.size if (im1.size[0] * im1.size[1]) < (im2.size[0] * im2.size[1]) else im2.size
        li= self._make_regalur_image(im1, resize_value)
        ri = self._make_regalur_image(im2, resize_value)
        return round(self._calc_similar(li, ri) * 100, 2)

    # **********************SSIM结构相似性算法计算两张图片的相似性****************************

    def calculate_similar_images_by_ssim(self, srcfile, dstfile):
        '''
        通过SSIM结构相似性算法计算两张图片的相似性【图片相似性计算推荐使用该方法】
        参数：
            srcfile:对比图片1路径
            dstfile:对比图片2路径
        返回值：
            返回两张图片相似度（百分比）
        作者：
            lianjiaxin
        '''
        self._check_file(srcfile)
        self._check_file(dstfile)
        im1 = Image.open(srcfile)
        im2 = Image.open(dstfile)
        return round(ssim.compute_ssim(im1, im2) * 100, 2)

    def detect_image_corridor(self, srcfile, dstfile, similarity=80):
        '''
        检测图像走廊模式开启后的效果，将源图像srcfile进行走廊模式处理，再与目的图像dstfile进行相似性比较；
        若相似度大于similarity，则判定走廊模式生效；否则走廊模式不生效
        参数：
            srcfile:未开启走廊模式的图片路径
            dstfile:开启走廊模式的图片路径
            similarity:图片相似度阈值，若源图像处理后，相似度大于similarity，则判定走廊模式生效；否则走廊模式不生效
        返回值：
            分析结果，走廊模式生效返回True；否则返回False
        作者：
            lianjiaxin
        '''
        self._check_file(srcfile)
        self._check_file(dstfile)
        im1 = Image.open(srcfile)
        im2 = Image.open(dstfile)
        temp = im1.transpose(Image.ROTATE_270).rotate(180)  # .transpose(Image.FLIP_LEFT_RIGHT)
        similar_rate = ssim.compute_ssim(temp, im2) * 100
        print 'similarity= ', round(similar_rate, 2)
        if similar_rate > 80:
            return True
        else:
            return False

    def detect_image_mirror(self, srcfile, dstfile, mirror='left-right', similarity=80):
        '''
        检测图像镜像模式开启后的效果，将源图像srcfile进行镜像处理，再与目的图像dstfile进行相似性比较；
        若相似度大于similarity，则判定走廊模式生效；否则走廊模式不生效
        参数：
            srcfile:未开启镜像模式的图片路径
            dstfile:开启镜像模式的图片路径
            mirror:镜像模式，支持left-right（左右镜像）,center（中心镜像）,top-bottom（中心镜像）
            similarity:图片相似度阈值，若源图像处理后，相似度大于similarity，则判定镜像模式生效；否则镜像模式不生效
        返回值：
            分析结果，镜像模式生效返回True；否则返回False
        作者：
            lianjiaxin
        '''
        self._check_file(srcfile)
        self._check_file(dstfile)
        im1 = Image.open(srcfile)
        im2 = Image.open(dstfile)

        if mirror.lower() == 'left-right':
            mirror_value = Image.FLIP_LEFT_RIGHT
        elif mirror.lower() == 'center':
            mirror_value = Image.ROTATE_180
        elif mirror.lower() == 'top-bottom':
            mirror_value = Image.FLIP_TOP_BOTTOM
        else:
            raise Exception("mirror ValueError, not support value:%s" % mirror)
        temp = im1.transpose(mirror_value)
        similar_rate = ssim.compute_ssim(temp, im2) * 100
        print 'similarity= ', round(similar_rate, 2)
        if similar_rate > 80:
            return True
        else:
            return False


    def _get_all_slice_from_array(self, narray, height_num=4, width_num=4):
        '''
        将数组的第一维、第二维进行切片处理，得到(height_num * width_num)个子数组，并以列表形式返回分割后子数组
        参数：
            narray:传入的数组
            height_num:第一维分割个数
            width_num:第二维分割个数
        返回：将分割后的子数组以列表形式返回
        '''
        try:
            height_num = int(height_num)
            width_num = int(width_num)
        except Exception, e:
            raise e
        height = narray.shape[0]
        width = narray.shape[1]
        sub_h = height / height_num
        sub_w = width / width_num
        # print sub_h, sub_w
        sub_array_list = []
        for x in xrange(0, height_num):
            for y in xrange(0, width_num):
                sub_array_list.append(narray[x * sub_h:(x + 1) * sub_h, y * sub_w:(y + 1) * sub_w])
        return sub_array_list

    def slice_image(self, filepath, dst_dir=None, horizontal=4, vertical=4):
        '''
        将图片分割成horizontal*vertical张图片，并保存到dst_dir目录
        filepath:
        dst_dir:保存图片目录
        horizontal:水平方向上切割个数
        vertical:垂直方向上切割个数
        备注：源图像命名，如"Test.jpg", 那么分割后的图像命名为"Test_1.jpg", "Test_2.jpg", "Test_3.jpg", ...
        '''
        self._check_file(filepath)
        img = cv2.imread(filepath)
        filepath_dir = os.path.dirname(filepath)
        basename = os.path.basename(filepath)
        basename_only, extensions = os.path.splitext(basename)
        if dst_dir is None or dst_dir == 'None':
            dst_dir = filepath_dir
        else:
            if not os.path.exists(dst_dir):
                os.makedirs(dst_dir)
        array_list = self._get_all_slice_from_array(img, int(horizontal), int(vertical))
        for index in xrange(1, len(array_list)+1):
            filename = basename_only + '_%d' % index + extensions
            temp_path = os.path.join(dst_dir, filename)
            cv2.imwrite(temp_path, array_list[index - 1])


    def estimate_noise(self, filepath):
        '''
        检测图像噪点。
        参数：
            filepath:图片路径
        返回值：
            返回噪点指数，指数越大，图像噪点越大
        作者：
            lianjiaxin
        '''
        import scipy
        self._check_file(filepath)
        img = cv2.imread(filepath)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        H, W = gray.shape

        M = [[1, -2, 1],  # 0均值高斯滤波
            [-2, 4, -2],
            [1, -2, 1]]
        sigma = np.sum(np.absolute(scipy.signal.convolve2d(gray, M)))
        sigma = sigma * math.sqrt(0.5 * math.pi) / (6 * (W-2) * (H-2))

        return sigma

    def detect_image_color_cast(self, filepath):
        '''
        检测图像色偏。（仅适用于彩色图片）
        参数：
            filepath:图片路径
        返回值：
            返回色偏指数字典：
            kernel：色偏指数，综合来说，kernel值小于1，可认为图像是正常的，否则，可认为存在色偏（参考值可能需要和实际情况结合进行调整）
            Da:红/绿色偏估计值，da大于0，表示偏红；da小于0表示偏绿
            Db:黄/蓝色偏估计值，db大于0，表示偏黄；db小于0表示偏蓝
        作者：
            lianjiaxin
        '''
        # RGB颜色空间是最简单的一种颜色空间，但是RGB颜色空间最大的局限性在于当用欧氏距离来刻画两种颜色之间的差异时，
        # 所计算出的两种颜色之间的距无法正确表征人们实际所感知到的这两种颜色之间的真实差异。采用CIE Lab颜色空间，
        # 此空间所计算出来的颜色之间的距离与实际感知上的差别基本一致。其直方图可以客观的反映图像色偏程度，
        # 在CIE Lab下进行偏色图像的自动检测更为合理。
        # 将RGB图像转变到CIE L*a*b*空间，其中L*表示图像亮度，a*表示图像红/绿分量，b*表示图像黄/蓝分量。
        # 通常存在色偏的图像，在a*和b*分量上的均值会偏离原点很远，方差也会偏小；
        # 通过计算图像在a*和b*分量上的均值和方差，就可评估图像是否存在色偏。
        self._check_file(filepath)
        img = cv2.imread(filepath)
        lab_img = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
        # HistA = np.repeat([0], 256)
        # HistB = np.repeat([0], 256)
        MN = lab_img.shape[0] * lab_img.shape[1]
        axis_l, axis_a, axis_b = cv2.split(lab_img)  # 取通道0~2中的1和2通道
        MN = axis_a.size
        # * da          红/绿色偏估计值，da大于0，表示偏红；da小于0表示偏绿
        # * db          黄/蓝色偏估计值，db大于0，表示偏黄；db小于0表示偏蓝
        Da = float(axis_a.sum()) / MN - 128  # 必须归一化到[-128，,127]范围内
        Db = float(axis_b.sum()) / MN - 128

        HistA, binsA = np.histogram(axis_a, range(256))
        HistB, binsB = np.histogram(axis_b, range(256))
        # 平均色度
        avg_huv = math.sqrt(Da * Da + Db * Db)
        Ma = 0.0
        Mb = 0.0
        for i in xrange(0, len(HistA)):
            Ma += abs(i - 128 -Da) * HistA[i]  # //计算范围-128～127
            Mb += abs(i - 128 -Db) * HistB[i]
        Ma /= MN
        Mb /= MN
        center_distance  = math.sqrt(Ma * Ma + Mb * Mb)
        kernel = avg_huv / center_distance
        color_cast_dict = {}
        color_cast_dict['kernel'] = kernel
        color_cast_dict['Da'] = Da
        color_cast_dict['Db'] = Db

        return color_cast_dict


    def detect_image_luminance(self, filepath):
        '''
        检测图像亮度情况。
        filepath:图片路径
        返回值：
            返回图像亮度检测结果：（以下为经验值）
                1)结果在[-1, 1]之间，亮度正常
                2)结果在[1, 2]之间，亮度较高
                3)结果大于2，亮度过曝
                4)结果在[-1, -1.5]，亮度较低
                5)结果小于-1.5，亮度太暗
        作者：
            lianjiaxin
        '''
        self._check_file(filepath)
        img = cv2.imread(filepath)
        gray_array = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        MN = gray_array.shape[0] * gray_array.shape[1]
        Hist, bins = np.histogram(gray_array, range(256))
        # print Hist
        Dlum = float(gray_array.sum()) / MN -128
        dl = Dlum
        Ma = 0.0
        for i in xrange(len(Hist)):
            Ma += abs(i - 128 - Dlum) * Hist[i]
        Ma /= MN
        cast = dl / Ma
        return cast



if __name__ == "__main__":
    # # print img_mode_dict
    testfile = "I:\\test_error\\9.jpg"  # black.png
    testfile2 = "I:\\clear\\road0.png"  # black.png
    img_analyze = Imagetestlib()
    # print img_analyze.get_available_file_extension(testfile)
    # print 'v=', img_analyze.assess_image_luminance(testfile)
    # print 's', img_analyze.assess_image_saturation(testfile)
    # print 'h', img_analyze.assess_image_hue(testfile)
    # print img_analyze.is_image_colorful(testfile, 15)
    # print img_analyze.assess_image_sharpness(testfile)
    # print img_analyze.detect_image_blur(testfile, 100)
    # Imghash_DiffNum = img_analyze.calculate_similar_images_by_imghash(testfile, testfile2)
    # Hist_similar = img_analyze.calculate_similar_images_by_histogram(testfile, testfile2)
    # Ssim_similar = img_analyze.calculate_similar_images_by_ssim(testfile, testfile2)
    # print img_analyze.assess_image_gray(testfile)
    # print img_analyze.assess_image_contrast(testfile)
    # print img_analyze.detect_image_corridor(testfile, testfile2)
    # print img_analyze.detect_image_mirror(testfile, testfile2, 'center', 80)
    # print img_analyze.slice_image(testfile)
    noise_estimation = img_analyze.estimate_noise(testfile)
    color_cast = img_analyze.detect_image_color_cast(testfile)
    lum_estimation = img_analyze.detect_image_luminance(testfile)
    print noise_estimation, color_cast, lum_estimation
    kernel = color_cast['kernel']
    # Da:红/绿色偏估计值，da大于0，表示偏红；da小于0表示偏绿
    # Db:黄/蓝色偏估计值，db大于0，表示偏黄；db小于0表示偏蓝

    if abs(color_cast['Da']) > abs(color_cast['Db']):
        if color_cast['Da'] > 0:
            cast_rbg = 'more red'
        else:
            cast_rbg = 'more green'
    else:
        if color_cast['Db'] > 0:
            cast_rbg = 'more yellow'
        else:
            cast_rbg = 'more blue'
    if kernel < 1:
        cast_rbg = ''
    img = cv2.imread(testfile)
    # text = 'color_cast = %d %s\r\nlum_estimation = %d\noise_estimation = %d\r\n' % (kernel, cast_rbg, lum_estimation, noise_estimation)
    text1 = 'cast = %.4f %s' %(kernel, cast_rbg)
    text2 = 'lum = %.4f' % lum_estimation
    text3 = 'noise = %.4f' %noise_estimation
    cv2.putText(img, text1, (10, 15), cv2.FONT_HERSHEY_SIMPLEX, 0.6,(0, 0, 255), 1)
    cv2.putText(img, text2, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6,(0, 0, 255), 1)
    cv2.putText(img, text3, (10, 45), cv2.FONT_HERSHEY_SIMPLEX, 0.6,(0, 0, 255), 1)
    cv2.imshow('test', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    cv2.imwrite('test.png',img)
    # img = cv2.imread(testfile)
    # img_var = img.var()
    # print img_var
    # print img.std()

    # text = 'Imghash_DiffNum = %d\nHist_similar = %d\nSsim_similar = %d\n' % (Imghash_DiffNum, Hist_similar, Ssim_similar)



    # im = Image.open(testfile)
    # im2 = Image.open(testfile2)
    # # temp = im.transpose(Image.ROTATE_180)  # Image.FLIP_LEFT_RIGHT
    # plt.subplot(1, 2, 1)
    # plt.title(text)
    # plt.imshow(im.transpose(Image.FLIP_LEFT_RIGHT).rotate(180))
    # plt.xticks([])
    # plt.yticks([])
    # plt.subplot(1, 2, 2)
    # plt.imshow(im2.transpose(Image.FLIP_LEFT_RIGHT).rotate(180))
    # plt.xticks([])
    # plt.yticks([])
    # plt.show()
    # print sys._getframe()

    # print help(cv2.ORB)
